{"/home/travis/build/npmtest/node-npmtest-css-loader/test.js":"/* istanbul instrument in package npmtest_css_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-loader/lib.npmtest_css_loader.js":"/* istanbul instrument in package npmtest_css_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_css_loader = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_css_loader = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-css-loader/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-css-loader && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_css_loader */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_css_loader\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_css_loader.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_css_loader.rollup.js'] =\n            local.assetsDict['/assets.npmtest_css_loader.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_css_loader.__dirname + '/lib.npmtest_css_loader.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/index.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = require(\"./lib/loader\");\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/loader.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar loaderUtils = require(\"loader-utils\");\nvar processCss = require(\"./processCss\");\nvar getImportPrefix = require(\"./getImportPrefix\");\nvar compileExports = require(\"./compile-exports\");\nvar createResolver = require(\"./createResolver\");\n\n\nmodule.exports = function(content, map) {\n\tif(this.cacheable) this.cacheable();\n\tvar callback = this.async();\n\tvar query = loaderUtils.getOptions(this) || {};\n\tvar root = query.root;\n\tvar moduleMode = query.modules || query.module;\n\tvar camelCaseKeys = query.camelCase || query.camelcase;\n\tvar resolve = createResolver(query.alias);\n\n\tif(map !== null && typeof map !== \"string\") {\n\t\tmap = JSON.stringify(map);\n\t}\n\n\tprocessCss(content, map, {\n\t\tmode: moduleMode ? \"local\" : \"global\",\n\t\tfrom: loaderUtils.getRemainingRequest(this),\n\t\tto: loaderUtils.getCurrentRequest(this),\n\t\tquery: query,\n\t\tminimize: this.minimize,\n\t\tloaderContext: this\n\t}, function(err, result) {\n\t\tif(err) return callback(err);\n\n\t\tvar cssAsString = JSON.stringify(result.source);\n\n\t\t// for importing CSS\n\t\tvar importUrlPrefix = getImportPrefix(this, query);\n\n\t\tvar alreadyImported = {};\n\t\tvar importJs = result.importItems.filter(function(imp) {\n\t\t\tif(!imp.mediaQuery) {\n\t\t\t\tif(alreadyImported[imp.url])\n\t\t\t\t\treturn false;\n\t\t\t\talreadyImported[imp.url] = true;\n\t\t\t}\n\t\t\treturn true;\n\t\t}).map(function(imp) {\n\t\t\tif(!loaderUtils.isUrlRequest(imp.url, root)) {\n\t\t\t\treturn \"exports.push([module.id, \" +\n\t\t\t\t\tJSON.stringify(\"@import url(\" + imp.url + \");\") + \", \" +\n\t\t\t\t\tJSON.stringify(imp.mediaQuery) + \"]);\";\n\t\t\t} else {\n\t\t\t\tvar importUrl = importUrlPrefix + imp.url;\n\t\t\t\treturn \"exports.i(require(\" + loaderUtils.stringifyRequest(this, importUrl) + \"), \" + JSON.stringify(imp.mediaQuery) + \");\";\n\t\t\t}\n\t\t}, this).join(\"\\n\");\n\n\t\tfunction importItemMatcher(item) {\n\t\t\tvar match = result.importItemRegExp.exec(item);\n\t\t\tvar idx = +match[1];\n\t\t\tvar importItem = result.importItems[idx];\n\t\t\tvar importUrl = importUrlPrefix + importItem.url;\n\t\t\treturn \"\\\" + require(\" + loaderUtils.stringifyRequest(this, importUrl) + \").locals\" +\n\t\t\t\t\"[\" + JSON.stringify(importItem.export) + \"] + \\\"\";\n\t\t}\n\n\t\tcssAsString = cssAsString.replace(result.importItemRegExpG, importItemMatcher.bind(this));\n\t\tif(query.url !== false) {\n\t\t\tcssAsString = cssAsString.replace(result.urlItemRegExpG, function(item) {\n\t\t\t\tvar match = result.urlItemRegExp.exec(item);\n\t\t\t\tvar idx = +match[1];\n\t\t\t\tvar urlItem = result.urlItems[idx];\n\t\t\t\tvar url = resolve(urlItem.url);\n\t\t\t\tidx = url.indexOf(\"?#\");\n\t\t\t\tif(idx < 0) idx = url.indexOf(\"#\");\n\t\t\t\tvar urlRequest;\n\t\t\t\tif(idx > 0) { // idx === 0 is catched by isUrlRequest\n\t\t\t\t\t// in cases like url('webfont.eot?#iefix')\n\t\t\t\t\turlRequest = url.substr(0, idx);\n\t\t\t\t\treturn \"\\\" + require(\" + loaderUtils.stringifyRequest(this, urlRequest) + \") + \\\"\" +\n\t\t\t\t\t\t\turl.substr(idx);\n\t\t\t\t}\n\t\t\t\turlRequest = url;\n\t\t\t\treturn \"\\\" + require(\" + loaderUtils.stringifyRequest(this, urlRequest) + \") + \\\"\";\n\t\t\t}.bind(this));\n\t\t}\n\n\n\t\tvar exportJs = compileExports(result, importItemMatcher.bind(this), camelCaseKeys);\n\t\tif (exportJs) {\n\t\t\texportJs = \"exports.locals = \" + exportJs + \";\";\n\t\t}\n\n\t\tvar moduleJs;\n\t\tif(query.sourceMap && result.map) {\n\t\t\t// add a SourceMap\n\t\t\tmap = result.map;\n\t\t\tif(map.sources) {\n\t\t\t\tmap.sources = map.sources.map(function(source) {\n\t\t\t\t\treturn source.split(\"!\").pop();\n\t\t\t\t}, this);\n\t\t\t\tmap.sourceRoot = \"\";\n\t\t\t}\n\t\t\tmap.file = map.file.split(\"!\").pop();\n\t\t\tmap = JSON.stringify(map);\n\t\t\tmoduleJs = \"exports.push([module.id, \" + cssAsString + \", \\\"\\\", \" + map + \"]);\";\n\t\t} else {\n\t\t\tmoduleJs = \"exports.push([module.id, \" + cssAsString + \", \\\"\\\"]);\";\n\t\t}\n\n\t\t// embed runtime\n\t\tcallback(null, \"exports = module.exports = require(\" +\n\t\t\tloaderUtils.stringifyRequest(this, require.resolve(\"./css-base.js\")) +\n\t\t\t\")(\" + query.sourceMap + \");\\n\" +\n\t\t\t\"// imports\\n\" +\n\t\t\timportJs + \"\\n\\n\" +\n\t\t\t\"// module\\n\" +\n\t\t\tmoduleJs + \"\\n\\n\" +\n\t\t\t\"// exports\\n\" +\n\t\t\texportJs);\n\t}.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/processCss.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar formatCodeFrame = require(\"babel-code-frame\");\nvar Tokenizer = require(\"css-selector-tokenizer\");\nvar postcss = require(\"postcss\");\nvar loaderUtils = require(\"loader-utils\");\nvar assign = require(\"object-assign\");\nvar getLocalIdent = require(\"./getLocalIdent\");\n\nvar localByDefault = require(\"postcss-modules-local-by-default\");\nvar extractImports = require(\"postcss-modules-extract-imports\");\nvar modulesScope = require(\"postcss-modules-scope\");\nvar modulesValues = require(\"postcss-modules-values\");\n\nvar parserPlugin = postcss.plugin(\"css-loader-parser\", function(options) {\n\treturn function(css) {\n\t\tvar imports = {};\n\t\tvar exports = {};\n\t\tvar importItems = [];\n\t\tvar urlItems = [];\n\n\t\tfunction replaceImportsInString(str) {\n\t\t\tif(options.import) {\n\t\t\t\tvar tokens = str.split(/(\\S+)/);\n\t\t\t\ttokens = tokens.map(function (token) {\n\t\t\t\t\tvar importIndex = imports[\"$\" + token];\n\t\t\t\t\tif(typeof importIndex === \"number\") {\n\t\t\t\t\t\treturn \"___CSS_LOADER_IMPORT___\" + importIndex + \"___\";\n\t\t\t\t\t}\n\t\t\t\t\treturn token;\n\t\t\t\t});\n\t\t\t\treturn tokens.join(\"\");\n\t\t\t}\n\t\t\treturn str;\n\t\t}\n\n\t\tif(options.import) {\n\t\t\tcss.walkAtRules(\"import\", function(rule) {\n\t\t\t\tvar values = Tokenizer.parseValues(rule.params);\n\t\t\t\tvar url = values.nodes[0].nodes[0];\n\t\t\t\tif(url.type === \"url\") {\n\t\t\t\t\turl = url.url;\n\t\t\t\t} else if(url.type === \"string\") {\n\t\t\t\t\turl = url.value;\n\t\t\t\t} else throw rule.error(\"Unexpected format\" + rule.params);\n\t\t\t\tvalues.nodes[0].nodes.shift();\n\t\t\t\tvar mediaQuery = Tokenizer.stringifyValues(values);\n\t\t\t\tif(loaderUtils.isUrlRequest(url, options.root) && options.mode === \"global\") {\n\t\t\t\t\turl = loaderUtils.urlToRequest(url, options.root);\n\t\t\t\t}\n\t\t\t\timportItems.push({\n\t\t\t\t\turl: url,\n\t\t\t\t\tmediaQuery: mediaQuery\n\t\t\t\t});\n\t\t\t\trule.remove();\n\t\t\t});\n\t\t}\n\n\t\tcss.walkRules(function(rule) {\n\t\t\tif(rule.selector === \":export\") {\n\t\t\t\trule.walkDecls(function(decl) {\n\t\t\t\t\texports[decl.prop] = decl.value;\n\t\t\t\t});\n\t\t\t\trule.remove();\n\t\t\t} else if(/^:import\\(.+\\)$/.test(rule.selector)) {\n\t\t\t\tvar match = /^:import\\((.+)\\)$/.exec(rule.selector);\n\t\t\t\tvar url = loaderUtils.parseString(match[1]);\n\t\t\t\trule.walkDecls(function(decl) {\n\t\t\t\t\timports[\"$\" + decl.prop] = importItems.length;\n\t\t\t\t\timportItems.push({\n\t\t\t\t\t\turl: url,\n\t\t\t\t\t\texport: decl.value\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\trule.remove();\n\t\t\t}\n\t\t});\n\n\t\tObject.keys(exports).forEach(function(exportName) {\n\t\t\texports[exportName] = replaceImportsInString(exports[exportName]);\n\t\t});\n\n\t\tfunction processNode(item) {\n\t\t\tswitch (item.type) {\n\t\t\t\tcase \"value\":\n\t\t\t\t\titem.nodes.forEach(processNode);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"nested-item\":\n\t\t\t\t\titem.nodes.forEach(processNode);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"item\":\n\t\t\t\t\tvar importIndex = imports[\"$\" + item.name];\n\t\t\t\t\tif (typeof importIndex === \"number\") {\n\t\t\t\t\t\titem.name = \"___CSS_LOADER_IMPORT___\" + importIndex + \"___\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"url\":\n\t\t\t\t\tif (options.url && !/^#/.test(item.url) && loaderUtils.isUrlRequest(item.url, options.root)) {\n\t\t\t\t\t\titem.stringType = \"\";\n\t\t\t\t\t\tdelete item.innerSpacingBefore;\n\t\t\t\t\t\tdelete item.innerSpacingAfter;\n\t\t\t\t\t\tvar url = item.url;\n\t\t\t\t\t\titem.url = \"___CSS_LOADER_URL___\" + urlItems.length + \"___\";\n\t\t\t\t\t\turlItems.push({\n\t\t\t\t\t\t\turl: url\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tcss.walkDecls(function(decl) {\n\t\t\tvar values = Tokenizer.parseValues(decl.value);\n\t\t\tvalues.nodes.forEach(function(value) {\n\t\t\t\tvalue.nodes.forEach(processNode);\n\t\t\t});\n\t\t\tdecl.value = Tokenizer.stringifyValues(values);\n\t\t});\n\t\tcss.walkAtRules(function(atrule) {\n\t\t\tif(typeof atrule.params === \"string\") {\n\t\t\t\tatrule.params = replaceImportsInString(atrule.params);\n\t\t\t}\n\t\t});\n\n\t\toptions.importItems = importItems;\n\t\toptions.urlItems = urlItems;\n\t\toptions.exports = exports;\n\t};\n});\n\nmodule.exports = function processCss(inputSource, inputMap, options, callback) {\n\tvar query = options.query;\n\tvar root = query.root;\n\tvar context = query.context;\n\tvar localIdentName = query.localIdentName || \"[hash:base64]\";\n\tvar localIdentRegExp = query.localIdentRegExp;\n\tvar forceMinimize = query.minimize;\n\tvar minimize = typeof forceMinimize !== \"undefined\" ? !!forceMinimize : options.minimize;\n\n\tvar customGetLocalIdent = query.getLocalIdent || getLocalIdent;\n\n\tvar parserOptions = {\n\t\troot: root,\n\t\tmode: options.mode,\n\t\turl: query.url !== false,\n\t\timport: query.import !== false\n\t};\n\n\tvar pipeline = postcss([\n\t\tlocalByDefault({\n\t\t\tmode: options.mode,\n\t\t\trewriteUrl: function(global, url) {\n\t\t\t\tif(parserOptions.url){\n\t\t\t\t\tif(!loaderUtils.isUrlRequest(url, root)) {\n\t\t\t\t\t\treturn url;\n\t\t\t\t\t}\n\t\t\t\t\tif(global) {\n\t\t\t\t\t\treturn loaderUtils.urlToRequest(url, root);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn url;\n\t\t\t}\n\t\t}),\n\t\textractImports(),\n\t\tmodulesValues,\n\t\tmodulesScope({\n\t\t\tgenerateScopedName: function generateScopedName (exportName) {\n\t\t\t\treturn customGetLocalIdent(options.loaderContext, localIdentName, exportName, {\n\t\t\t\t\tregExp: localIdentRegExp,\n\t\t\t\t\thashPrefix: query.hashPrefix || \"\",\n\t\t\t\t\tcontext: context\n\t\t\t\t});\n\t\t\t}\n\t\t}),\n\t\tparserPlugin(parserOptions)\n\t]);\n\n\tif(minimize) {\n\t\tvar cssnano = require(\"cssnano\");\n\t\tvar minimizeOptions = assign({}, query.minimize);\n\t\t[\"zindex\", \"normalizeUrl\", \"discardUnused\", \"mergeIdents\", \"reduceIdents\", \"autoprefixer\"].forEach(function(name) {\n\t\t\tif(typeof minimizeOptions[name] === \"undefined\")\n\t\t\t\tminimizeOptions[name] = false;\n\t\t});\n\t\tpipeline.use(cssnano(minimizeOptions));\n\t}\n\n\tpipeline.process(inputSource, {\n\t\t// we need a prefix to avoid path rewriting of PostCSS\n\t\tfrom: \"/css-loader!\" + options.from,\n\t\tto: options.to,\n\t\tmap: {\n\t\t\tprev: inputMap,\n\t\t\tsourcesContent: true,\n\t\t\tinline: false,\n\t\t\tannotation: false\n\t\t}\n\t}).then(function(result) {\n\t\tcallback(null, {\n\t\t\tsource: result.css,\n\t\t\tmap: result.map && result.map.toJSON(),\n\t\t\texports: parserOptions.exports,\n\t\t\timportItems: parserOptions.importItems,\n\t\t\timportItemRegExpG: /___CSS_LOADER_IMPORT___([0-9]+)___/g,\n\t\t\timportItemRegExp: /___CSS_LOADER_IMPORT___([0-9]+)___/,\n\t\t\turlItems: parserOptions.urlItems,\n\t\t\turlItemRegExpG: /___CSS_LOADER_URL___([0-9]+)___/g,\n\t\t\turlItemRegExp: /___CSS_LOADER_URL___([0-9]+)___/\n\t\t});\n\t}).catch(function(err) {\n\t\tif (err.name === 'CssSyntaxError') {\n\t\t\tvar wrappedError = new CSSLoaderError(\n\t\t\t\t'Syntax Error',\n\t\t\t\terr.reason,\n\t\t\t\terr.line != null && err.column != null\n\t\t\t\t\t? {line: err.line, column: err.column}\n\t\t\t\t\t: null,\n\t\t\t\terr.input.source\n\t\t\t);\n\t\t\tcallback(wrappedError);\n\t\t} else {\n\t\t\tcallback(err);\n\t\t}\n\t});\n};\n\nfunction formatMessage(message, loc, source) {\n\tvar formatted = message;\n\tif (loc) {\n\t\tformatted = formatted\n\t\t\t+ ' (' + loc.line + ':' + loc.column + ')';\n\t}\n\tif (loc && source) {\n\t\tformatted = formatted\n\t\t\t+ '\\n\\n' + formatCodeFrame(source, loc.line, loc.column) + '\\n';\n\t}\n\treturn formatted;\n}\n\nfunction CSSLoaderError(name, message, loc, source, error) {\n\tError.call(this);\n\tError.captureStackTrace(this, CSSLoaderError);\n\tthis.name = name;\n\tthis.error = error;\n\tthis.message = formatMessage(message, loc, source);\n\tthis.hideStack = true;\n}\n\nCSSLoaderError.prototype = Object.create(Error.prototype);\nCSSLoaderError.prototype.constructor = CSSLoaderError;\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/getLocalIdent.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar loaderUtils = require(\"loader-utils\");\nvar path = require(\"path\");\n\nmodule.exports = function getLocalIdent(loaderContext, localIdentName, localName, options) {\n\tif(!options.context)\n\t\toptions.context = loaderContext.options && typeof loaderContext.options.context === \"string\" ? loaderContext.options.context : loaderContext.context;\n\tvar request = path.relative(options.context, loaderContext.resourcePath);\n\toptions.content = options.hashPrefix + request + \"+\" + localName;\n\tlocalIdentName = localIdentName.replace(/\\[local\\]/gi, localName);\n\tvar hash = loaderUtils.interpolateName(loaderContext, localIdentName, options);\n\treturn hash.replace(new RegExp(\"[^a-zA-Z0-9\\\\-_\\u00A0-\\uFFFF]\", \"g\"), \"-\").replace(/^((-?[0-9])|--)/, \"_$1\");\n};\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/getImportPrefix.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = function getImportPrefix(loaderContext, query) {\n\tif(query.importLoaders === false)\n\t\treturn \"\";\n\tvar importLoaders = parseInt(query.importLoaders, 10) || 0;\n\tvar loadersRequest = loaderContext.loaders.slice(\n\t\tloaderContext.loaderIndex,\n\t\tloaderContext.loaderIndex + 1 + importLoaders\n\t).map(function(x) { return x.request; }).join(\"!\");\n\treturn \"-!\" + loadersRequest + \"!\";\n};\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/compile-exports.js":"var camelCase = require(\"lodash.camelcase\");\n\nfunction dashesCamelCase(str) {\n  return str.replace(/-(\\w)/g, function(match, firstLetter) {\n    return firstLetter.toUpperCase();\n  });\n}\n\nmodule.exports = function compileExports(result, importItemMatcher, camelCaseKeys) {\n  if (!Object.keys(result.exports).length) {\n    return \"\";\n  }\n\n  var exportJs = Object.keys(result.exports).reduce(function(res, key) {\n    var valueAsString = JSON.stringify(result.exports[key]);\n    valueAsString = valueAsString.replace(result.importItemRegExpG, importItemMatcher);\n    function addEntry(k) {\n      res.push(\"\\t\" + JSON.stringify(k) + \": \" + valueAsString);\n    }\n\n    var targetKey;\n    switch(camelCaseKeys) {\n      case true:\n        addEntry(key);\n        targetKey = camelCase(key);\n        if (targetKey !== key) {\n          addEntry(targetKey);\n        }\n        break;\n      case 'dashes':\n        addEntry(key);\n        targetKey = dashesCamelCase(key);\n        if (targetKey !== key) {\n          addEntry(targetKey);\n        }\n        break;\n      case 'only':\n        addEntry(camelCase(key));\n        break;\n      case 'dashesOnly':\n        addEntry(dashesCamelCase(key));\n        break;\n      default:\n        addEntry(key);\n        break;\n    }\n    return res;\n  }, []).join(\",\\n\");\n\n  return \"{\\n\" + exportJs + \"\\n}\";\n};\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/createResolver.js":"module.exports = function createResolver(alias) {\n\tif(typeof alias !== \"object\" || Array.isArray(alias)) {\n\t\treturn function(url) {\n\t\t\treturn url\n\t\t};\n\t}\n\n\talias = Object.keys(alias).map(function(key) {\n\t\tvar onlyModule = false;\n\t\tvar obj = alias[key];\n\t\tif(/\\$$/.test(key)) {\n\t\t\tonlyModule = true;\n\t\t\tkey = key.substr(0, key.length - 1);\n\t\t}\n\t\tif(typeof obj === \"string\") {\n\t\t\tobj = {\n\t\t\t\talias: obj\n\t\t\t};\n\t\t}\n\t\tobj = Object.assign({\n\t\t\tname: key,\n\t\t\tonlyModule: onlyModule\n\t\t}, obj);\n\t\treturn obj;\n\t});\n\n\treturn function(url) {\n\t\talias.forEach(function(obj) {\n\t\t\tvar name = obj.name;\n\t\t\tif(url === name || (!obj.onlyModule && url.startsWith(name + \"/\"))) {\n\t\t\t\turl = obj.alias + url.substr(name.length);\n\t\t\t}\n\t\t});\n\t\treturn url;\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/css-base.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap) {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n  var base64 = new Buffer(JSON.stringify(sourceMap)).toString('base64');\n  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n  return '/*# ' + data + ' */';\n}\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/lib/localsLoader.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nvar loaderUtils = require(\"loader-utils\");\nvar processCss = require(\"./processCss\");\nvar getImportPrefix = require(\"./getImportPrefix\");\nvar compileExports = require(\"./compile-exports\");\n\n\nmodule.exports = function(content) {\n\tif(this.cacheable) this.cacheable();\n\tvar callback = this.async();\n\tvar query = loaderUtils.getOptions(this) || {};\n\tvar moduleMode = query.modules || query.module;\n\tvar camelCaseKeys = query.camelCase || query.camelcase;\n\n\tprocessCss(content, null, {\n\t\tmode: moduleMode ? \"local\" : \"global\",\n\t\tquery: query,\n\t\tminimize: this.minimize,\n\t\tloaderContext: this\n\t}, function(err, result) {\n\t\tif(err) return callback(err);\n\n\t\t// for importing CSS\n\t\tvar importUrlPrefix = getImportPrefix(this, query);\n\n\t\tfunction importItemMatcher(item) {\n\t\t\tvar match = result.importItemRegExp.exec(item);\n\t\t\tvar idx = +match[1];\n\t\t\tvar importItem = result.importItems[idx];\n\t\t\tvar importUrl = importUrlPrefix + importItem.url;\n\t\t\treturn \"\\\" + require(\" + loaderUtils.stringifyRequest(this, importUrl) + \")\" +\n\t\t\t\t\"[\" + JSON.stringify(importItem.export) + \"] + \\\"\";\n\t\t}\n\n\t\tvar exportJs = compileExports(result, importItemMatcher.bind(this), camelCaseKeys);\n\t\tif (exportJs) {\n\t\t\texportJs = \"module.exports = \" + exportJs + \";\";\n\t\t}\n\n\n\t\tcallback(null, exportJs);\n\t}.bind(this));\n};\n","/home/travis/build/npmtest/node-npmtest-css-loader/node_modules/css-loader/locals.js":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\nmodule.exports = require(\"./lib/localsLoader\");\n"}